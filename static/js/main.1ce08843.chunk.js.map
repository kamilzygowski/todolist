{"version":3,"sources":["components/ListView/ListView.js","components/Login/Login.js","components/Register/Register.js","components/ToDo/ToDo.js","App.js","reportWebVitals.js","index.js"],"names":["REACT_APP_DB_HOST","process","ListView","props","componentDidMount","axios","get","headers","then","response","setState","lists","data","addTask","newList","index","newTask","state","id","task","length","push","put","saveChanges","changeTaskName","changeTaskId","name","changeListName","deleteTask","e","console","log","target","render","toggleListView","onPlaceholderChange","deleteList","className","filter","list","map","type","placeholder","defaultValue","onChange","value","tasks","key","onClick","icon","faTimes","isDone","React","Component","authAxios","create","baseURL","Authorization","Login","toggle","logged","postLogin","changeHandler","identifier","password","post","this","catch","error","ref","containerRef","Register","submitHandler","preventDefault","loadout","username","email","check","faLongArrowAltLeft","onSubmit","ToDo","getKeyOfList","undefined","indexOfList","getAttribute","viewList","listItemOnClick","filterBySearch","addList","placeholderList","delete","renderToDo","faSignOutAlt","searchingPhrase","toLowerCase","includes","search","faThumbtack","onClickCapture","faCheckSquare","toDoMount","faPlus","href","dataFromChild","App","toggleLoginAndRegister","loginView","logIn","loggedIn","bind","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce08843.chunk.js","sourcesContent":["\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport './ListView.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst {REACT_APP_DB_HOST} = process.env;\r\n\r\nclass ListView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            placeholder: this.props.placeholder,\r\n            lists: [],\r\n            index: 0,\r\n            changeListName: \"\",\r\n            newList: {},\r\n            newTask: {\r\n                id: 5,\r\n                name: \"\",\r\n                isDone: false,\r\n            },\r\n            changeTaskName: \"\",\r\n            changeTaskId: \"\",\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`, {\r\n            headers: {\r\n                'Authorization': 'Bearer siema'\r\n            }\r\n        })\r\n            .then(response => {\r\n                this.setState({ lists: response.data })\r\n            })\r\n            \r\n    }\r\n\r\n    addTask = () => {\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`)\r\n            .then(response => {\r\n                /* Find the list and get it to the this.state variable */\r\n                this.setState({\r\n                    newList: response.data[this.props.index - 1],\r\n                })\r\n\r\n            })\r\n            .then(response => {\r\n                /* Create newTask and place it in newTask state */\r\n                this.setState({\r\n                    newTask: {\r\n                        ...this.state.newTask,\r\n                        id: this.state.newList.task.length + 1,\r\n                    }\r\n                })\r\n                /* Add an array object to variable that represents state of list on server */\r\n                this.state.newList.task.push(this.state.newTask)\r\n            })\r\n            .then(() => {\r\n                        /* Build new task in a certain list using cloned list piece */\r\n                axios.put(`${REACT_APP_DB_HOST}to-do-lists/${this.props.index}`, {\r\n                    ...this.state.newList,\r\n                    task: [\r\n                        ...this.state.newList.task,\r\n                    ]\r\n                }).then(() => {\r\n                    /* Refresh the ViewList to see the changes on server */\r\n                    this.componentDidMount()\r\n                })\r\n            })\r\n    }\r\n\r\n    saveChanges = () => {\r\n        /* Get the list to save it in newList state, then change it's list name to given in input */\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`)\r\n            .then(response => {\r\n                this.setState({\r\n                    newList: response.data[this.props.index - 1],\r\n                })\r\n            })\r\n            .then(() => {\r\n                /* IMPORTANT I have to find out how to setState of IN ARRAY thimg like below without mutating this state */\r\n                if (this.state.changeTaskName !== \"\" && this.state.changeTaskId !== \"\") {\r\n                    this.state.newList.task[this.state.changeTaskId - 1].name = this.state.changeTaskName\r\n                }\r\n\r\n                if(this.state.changeListName !==\"\"){\r\n                    this.state.newList.name = this.state.changeListName\r\n                }\r\n            })\r\n            .then(() => {\r\n                axios.put(`${REACT_APP_DB_HOST}to-do-lists/${this.props.index}`, {\r\n                    ...this.state.newList,\r\n                    task: [\r\n                        ...this.state.newList.task,\r\n                    ]\r\n                }).then(() => {\r\n                    this.componentDidMount()\r\n                    \r\n                })\r\n            })\r\n    }\r\n\r\n    deleteTask = (e) => {\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`)\r\n            .then(response => {\r\n                this.setState({\r\n                    newList: response.data[this.props.index - 1],\r\n                })\r\n            })\r\n            .then(() => {\r\n                console.log('xd: ' + e.target.id)\r\n                //this.state.newList.task.splice(e.target.id, 1)\r\n\r\n                /*for (var i = 0; i < this.state.newList.task.length; i++) {\r\n                    var obj = this.state.newList.task[i];\r\n                \r\n                    if (e.target.id.indexOf(obj.id) !== -1) {\r\n                        this.state.newList.task.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }*/ \r\n\r\n                axios.put(`${REACT_APP_DB_HOST}to-do-lists/${this.props.index}`,\r\n                this.state.newList\r\n            )\r\n                .then(() => {\r\n                    this.componentDidMount()\r\n                    this.render()\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    toggleListView = () => {\r\n        this.props.onPlaceholderChange(true)\r\n        this.props.toggleListView()\r\n    }\r\n\r\n    deleteList = () => {\r\n        this.props.deleteList()\r\n    }\r\n\r\n    render = () => {\r\n        const { lists } = this.state\r\n        return (\r\n            <div className=\"listView\">\r\n                {/* Display the name of the last clicked list! */}\r\n                {lists.length ?\r\n                    lists.filter(list => list.id === this.props.index).map(list =>\r\n                        <span className=\"listSection\">\r\n                            <input type=\"text\" placeholder=\"List name\" defaultValue={list.name} onChange={(e) => this.setState({ changeListName: e.target.value })} className=\"listName\"></input>\r\n                        </span>) :\r\n                    \"\"\r\n                }\r\n\r\n                {/* Sort and filter the list that will be displayed*/}\r\n                {lists.length ?\r\n                    lists.filter(list => list.id === this.props.index).map(list =>\r\n                        <div className=\"tasks\" key={list.key}>\r\n\r\n                            {/* These are form inputs and checkmark for every task */}\r\n                            {list.task.map(tasks =>\r\n                                <form className=\"tasksForm\" key={list.key}>\r\n                                    <input type=\"checkbox\" className=\"checkBox\" key={list.key}></input>\r\n                                    <input type=\"text\" placeholder=\"Task name\" className=\"taskNameInput\" key={list.id} id={tasks.id} onChange={(e) => this.setState({\r\n                                        changeTaskName: e.target.value\r\n                                    })} onClick={(e) => this.setState({\r\n                                        changeTaskId: e.target.id\r\n                                    })} defaultValue={tasks.name}></input>\r\n                                    <span className=\"checkmark\" key={list.key}></span>\r\n                                    <span className=\"coverSpan\" key={list.key}>\r\n                                        <FontAwesomeIcon icon={faTimes} className=\"deleteTask\" id={tasks.id-1} onClick={this.deleteTask} key={list.key}/>\r\n                                    </span>\r\n                                </form>\r\n                            )}\r\n                        </div>) :\r\n                    \"\"\r\n                }\r\n                {/* Usage buttons on the display view*/}\r\n                <span className=\"buttonsSection\">\r\n                    <span className=\"buttonsRow\">\r\n                        <button className=\"addBtn\" type=\"submit\" onClick={this.addTask}> ADD TASK </button>\r\n                        <button className=\"cancelAddBtn\" onClick={this.deleteList}> DELETE LIST </button>\r\n                    </span>\r\n                    <span className=\"buttonsRow\">\r\n                        <a className=\"cancelBtn\" onClick={this.toggleListView}>CANCEL</a>\r\n                        <button className=\"saveBtn\" type=\"submit\" onClick={this.saveChanges}>SAVE</button>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n} export default ListView;","import React from 'react';\r\nimport './Login.css';\r\nimport axios from 'axios';\r\n\r\nconst accesToken = 'siema';\r\nconst {REACT_APP_DB_HOST} = process.env;\r\n\r\nconst authAxios = axios.create({\r\n  baseURL: REACT_APP_DB_HOST,\r\n  headers: {\r\n    Authorization: `Bearer ${accesToken}`\r\n  }\r\n})\r\n\r\nclass Login extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      identifier:\"\",\r\n      password:\"\",\r\n    }\r\n  }\r\n\r\n  postLogin() {\r\n\r\n    const postLogin = authAxios.post(`/login`, this.state)\r\n    .then(response => {\r\n      console.log(response)\r\n      console.log(postLogin)\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n      console.log(':(')\r\n    })\r\n  }\r\n  \r\n  \r\n\r\n    toggle = () => {\r\n        this.props.toggle();\r\n    }\r\n\r\n    logged = () => {\r\n      this.postLogin()\r\n        this.props.logged()\r\n    }\r\n\r\n    changeHandler = (e) => {\r\n      this.setState({[e.target.name]: e.target.value})\r\n  }\r\n\r\n\r\n    render(){\r\n        const {identifier, password} = this.state;\r\n  return (\r\n    <div className=\"Login\" ref={this.props.containerRef}>\r\n      <div className=\"window\">\r\n          <h1 className=\"loginHeader\">Login</h1>\r\n          <input className=\"username\" name=\"identifier\" placeholder=\"E-mail or Username\" value={identifier} onChange={this.changeHandler}></input>\r\n          <input type=\"password\" className=\"password\" name=\"password\" placeholder=\"Password\" value={password} onChange={this.changeHandler}></input>\r\n          <button className=\"loginBtn\" onClick={this.logged}>Login</button>\r\n          <p className=\"smallOr\"> or </p>\r\n          <a className=\"createAccount\" ref={this.props.containerRef} onClick={this.toggle}> create an account </a>\r\n      </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport './Register.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLongArrowAltLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from \"axios\";\r\n\r\nconst accesToken = 'siema';\r\nconst apiUrl = 'http://localhost:8000';\r\n\r\nconst authAxios = axios.create({\r\n  baseURL: apiUrl,\r\n  headers: {\r\n    Authorization: `Bearer ${accesToken}`\r\n  }\r\n})\r\n\r\nclass Register extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n           username:\"\", \r\n           email: \"\", \r\n           password: \"\"\r\n        }\r\n    }\r\n    \r\n\r\n    toggle = () => {\r\n        this.props.toggle();\r\n    }\r\n\r\n    changeHandler = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    submitHandler = (e) => {\r\n        e.preventDefault()\r\n        console.log(this.state)\r\n        let loadout = authAxios.post(`/register`, this.state)\r\n            .then(response => {\r\n                console.log(response)\r\n                console.log(loadout)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    render(){\r\n        const {username, email, password, check} = this.state\r\n        return(\r\n            <div className=\"register\" ref={this.props.containerRef}>\r\n                <FontAwesomeIcon icon={faLongArrowAltLeft} onClick={this.toggle} className=\"back\" />\r\n                <h1 className=\"registerHeader\"> Create a new account </h1>\r\n                <form onSubmit={this.submitHandler}>\r\n                <input type=\"text\" placeholder=\"Username\" name=\"username\" className=\"inputs\" value={username} onChange={this.changeHandler}/>\r\n                <input type=\"email\" placeholder=\"E-mail\" name=\"email\"  className=\"inputs\" value={email} onChange={this.changeHandler}/>\r\n                <input type=\"password\" placeholder=\"Password\" name=\"password\"  className=\"inputs\" value={password} onChange={this.changeHandler}/>\r\n                <input type=\"password\" placeholder=\"Repeat password\" name=\"password\"  className=\"inputs\" value={check} onChange={this.changeHandler}/>\r\n                <button type=\"submit\" className=\"createBtn\"> Create </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n} \r\nexport default Register;","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAssistiveListeningSystems, faSignOutAlt, faPlus, faCheckSquare, faThumbtack } from '@fortawesome/free-solid-svg-icons';\r\nimport './ToDo.css';\r\nimport ListView from \"../ListView/ListView\";\r\nimport axios from \"axios\";\r\n\r\nconst {REACT_APP_DB_HOST} = process.env;\r\n\r\nclass ToDo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            placeholder: false,\r\n            lists: [],\r\n            viewList: false,\r\n            indexOfList: 0,\r\n            renderToDo: false,\r\n            dataFromChild: \"\",\r\n            newList: {\r\n                id: \"\",\r\n                name: \"I'm nameless list :(\",\r\n                task: []\r\n            },\r\n            searchingPhrase: \"\",\r\n            placeholderList: {},\r\n        }\r\n    }\r\n\r\n\r\n    logged = () => {\r\n        this.props.logged();\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`, {\r\n            headers: {\r\n                'Authorization': 'Bearer siema'\r\n            }\r\n        })\r\n        .then(response => {   \r\n                this.setState({ lists: response.data })\r\n            })\r\n    }\r\n\r\n    getKeyOfList = (e) => {\r\n        if (e !== undefined) {\r\n            this.setState({\r\n                indexOfList: e.target.getAttribute('index')\r\n            });\r\n            //console.log(e.target)\r\n        }\r\n\r\n    }\r\n\r\n    onPlaceholderChange = (value) => {\r\n        this.setState({\r\n            placeholder: value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    toggleListView = () => {\r\n        if (this.state.viewList === false) {\r\n            this.setState({\r\n                viewList: true,\r\n            });\r\n\r\n\r\n        } else {\r\n            this.setState({\r\n                viewList: false,\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    listItemOnClick = () => {\r\n        this.getKeyOfList()\r\n        this.toggleListView()\r\n    }\r\n\r\n\r\n    filterBySearch = () => {\r\n\r\n    }\r\n\r\n    addList = () => {\r\n\r\n        /* First get the info about lists to write it down in a var */\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`)\r\n            .then(response => {\r\n                /* Write down all lists in lists var */\r\n                this.setState({ lists: response.data })\r\n            })\r\n            .then(() => {\r\n                this.setState({\r\n                    newList: {\r\n                        ...this.state.newList,\r\n                        id: this.state.lists.length + 1,\r\n                    }\r\n                })\r\n            })\r\n            .then(() => {\r\n                axios.post(`${REACT_APP_DB_HOST}to-do-lists/`, {\r\n                    ...this.state.newList\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    deleteList = (e) => {\r\n        axios.get(`${REACT_APP_DB_HOST}to-do-lists/`)\r\n            .then(response => {\r\n                this.setState({\r\n                    placeholderList: response.data[this.props.index - 1],\r\n                })\r\n            })\r\n            .then(() => {\r\n                axios.delete(`${REACT_APP_DB_HOST}to-do-lists/${this.state.indexOfList}`)\r\n            .then(() => {\r\n                this.componentDidMount()\r\n            })\r\n\r\n        this.setState({\r\n            viewList: false,\r\n        })\r\n            })\r\n    }\r\n\r\n\r\n    render = () => {\r\n        const { lists, viewList, indexOfList, renderToDo } = this.state;\r\n        if (this.state.placeholder === true){\r\n            this.componentDidMount()\r\n            this.setState({\r\n                placeholder: false\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"toDo\">\r\n                <FontAwesomeIcon icon={faSignOutAlt} className=\"logOut\" onClick={this.logged} />\r\n                <input placeholder=\"Search for lists!\" className=\"searchInput\" onChange={(e) => this.setState({ searchingPhrase: e.target.value.toLowerCase() })} />\r\n                <div className=\"mainBody\">\r\n                    <div className=\"lists\">\r\n                        {lists.filter((list) => {\r\n                            if (this.state.searchingPhrase === \"\") {\r\n                                return list.name\r\n                            } else if (list.name.toLowerCase().includes(this.state.searchingPhrase.toLowerCase())) {\r\n                                return list.name\r\n                            }\r\n                        }).map((list, search) => (\r\n                            <span className=\"pinSpan\" key={list.key}>\r\n                                <FontAwesomeIcon icon={faThumbtack} className=\"pinIcon\" key={list.key}/>\r\n                                <div className=\"list\" key={list.id} onClick={this.listItemOnClick} onClickCapture={() => this.setState({ indexOfList: list.id })} index={list.id}  >\r\n                                    <h3 className=\"listName\" key={list.key}>{list.name}</h3>\r\n                                    <p className=\"createDate\" key={list.key}> created today</p>\r\n                                    <span className=\"tasksDone\" key={list.key}>\r\n                                        <p key={list.key}> Tasks: {list.task.length}</p>\r\n                                        <FontAwesomeIcon icon={faCheckSquare} className=\"doneIcon\" key={list.key}/>\r\n                                        <p key={list.key}>/{list.task.length} all</p>\r\n                                    </span>\r\n                                </div>\r\n                                <FontAwesomeIcon icon={faThumbtack} className=\"pinIcon\" key={list.key}/>\r\n                            </span>\r\n                        ))}\r\n                        {viewList && <ListView toggleListView={this.toggleListView} index={indexOfList} \r\n                        renderToDo={renderToDo} deleteList={this.deleteList} toDoMount={this.componentDidMount} placeholder={this.state.placeholder} onPlaceholderChange={this.onPlaceholderChange}/>}\r\n                    </div>\r\n                </div>\r\n                <span className=\"addNewList\">\r\n                    <FontAwesomeIcon icon={faPlus} className=\"plusList\" onClick={this.addList} />\r\n                    <p className=\"plusListDescription\"> add new list </p>               \r\n                </span>\r\n                <a className=\"refreshServer\" href=\"https://todolist-fake-server.herokuapp.com/\"> If you don't see your lists just click here and then come back here :)</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ToDo;","import React from 'react';\nimport './App.css';\nimport ListView from './components/ListView/ListView';\nimport Login from './components/Login/Login';\nimport Register from './components/Register/Register';\nimport ToDo from './components/ToDo/ToDo';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loginView: true,\n      loggedIn: false,\n      viewList: false,\n    }\n    this.toggleLoginAndRegister = this.toggleLoginAndRegister.bind(this);\n  }\n\n  toggleLoginAndRegister = () => {\n    if (this.state.loginView === true) {\n      this.setState({\n        loginView: false,\n      });\n    } else {\n      this.setState({\n        loginView: true,\n      });\n    }\n  }\n\n  logIn = () => {\n    if(this.state.loggedIn === false){\n      this.setState({\n      loggedIn: true,\n    })\n  } else {\n    this.setState({\n      loggedIn: false,\n    })\n  }\n  }\n\n\n  render() {\n    const { loginView, loggedIn, viewList } = this.state;\n    return (\n      <div className=\"App\">\n        {loginView && !loggedIn && <Login toggle={this.toggleLoginAndRegister} logged={this.logIn} />}\n        {!loginView && !loggedIn && <Register toggle={this.toggleLoginAndRegister} />}\n        {loggedIn && <ToDo logged={this.logIn} toggleListView={this.toggleListView} viewList={this.viewList}/>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}